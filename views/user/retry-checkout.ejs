<%- include("../../views/partials/user/header") %>

<div class="container mt-5">
  <h2 class="mb-4 text-center">Retry Payment</h2>

  <div class="row">
    <!-- Left Column -->
    <div class="col-md-8">
      <div class="order-summary bg-light p-4 rounded shadow-lg mb-4">
        <h3 class="section-title">Order Summary</h3>
        <hr />
        
        <!-- Order Details -->
        <div class="order-details mb-4">
          <p class="order-id"><strong>Order ID:</strong> <%= order.orderId %></p>
          <p class="order-date"><strong>Order Date:</strong> <%= new Date(order.createdOn).toLocaleDateString() %></p>
        </div>

        <!-- Product Information -->
        <div class="products-list mb-4">
          <h4 class="subsection-title">Products</h4>
          <% order.ordereditems.forEach(item => { %>
            <div class="product-item">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="product-info">
                  <div class="row">
                    <div class="col-md-4">
                        <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="w-50">
                    </div>
                    <div class="col-md-8">
                      <p class="product-name mb-1"><%= item.product.productName %></p>
                      <p class="product-details mb-0">
                        Quantity: <%= item.quantity %> × ₹<%= item.price %>
                      </p>
                    </div>
                  </div>
                </div>
                <div class="product-total">
                  ₹<%= item.quantity * item.price %>
                </div>
              </div>
            </div>
          <% }); %>
        </div>

        <!-- Shipping Address -->
        <div class="shipping-address mb-4">
          <h4 class="subsection-title">Delivery Address</h4>
          <div class="address-details">
            <p class="mb-1"><%= address.name %></p>
            <p class="mb-1"><%= address.city %></p>
            <% if (address.landMark) { %>
              <p class="mb-1"><%= address.landMark %></p>
            <% } %>
            <p class="mb-1"><%= address.state %>, <%= address.pincode %></p>
          </div>
        </div>

        <!-- Price Details -->
        <div class="price-summary mb-4">
          <h4 class="subsection-title">Price Details</h4>
          <div class="d-flex justify-content-between mb-2">
            <span>Subtotal</span>
            <span>₹<%= order.finalAmount %></span>
          </div>
          <% if (order.couponDiscount) { %>
            <div class="d-flex justify-content-between mb-2 discount-applied">
              <span>Coupon Applied (<%= order.couponCode %>)</span>
              <span>-₹<%= order.couponDiscount %></span>
            </div>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Right Column -->
    <div class="col-md-4">
      <div class="payment-summary bg-light p-4 rounded shadow-lg">
        <h3 class="section-title">Payment Details</h3>
        <hr />
        
        <div class="total-amount mb-4">
          <h4 class="amount-title">Amount to Pay</h4>
          <p class="final-amount" id="amount">₹<%= order.finalAmount %></p>
        </div>

        <form id="retryPaymentForm" action="/retry-payment" method="POST">
          <input type="hidden" name="orderId" value="<%= order.orderId %>">

          <div class="form-group mb-3">
            <label for="paymentMethod" class="form-label">Payment Method</label>
            <select name="paymentMethod" id="paymentMethod" class="form-select" required>
              <option value="razorpay">Razorpay</option>
              <option value="cod">Cash on Delivery</option>
              <option value="wallet">Wallet</option>
            </select>
          </div>

          <button type="submit" class="btn btn-primary w-100 mt-3 shadow-sm">Retry Payment</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="d-none">
  <div id="loadingSpinner" class="text-center">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="text-white">Processing your request...</p>
  </div>
</div>

<%- include("../../views/partials/user/footer") %>

<!-- Enhanced Styles -->
<style>
  .section-title {
    color: #2c3e50;
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
  }

  .subsection-title {
    color: #34495e;
    font-size: 1.2rem;
    font-weight: 500;
    margin-bottom: 1rem;
  }

  .order-summary, .payment-summary {
    background: white !important;
    border: 1px solid #e3e3e3;
    transition: all 0.3s ease;
  }

  .order-details {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
  }

  .product-item {
    padding: 1rem;
    border-bottom: 1px solid #eee;
  }

  .product-item:last-child {
    border-bottom: none;
  }

  .product-name {
    font-weight: 500;
    color: #2c3e50;
  }

  .product-details {
    color: #7f8c8d;
    font-size: 0.9rem;
  }

  .product-total {
    font-weight: 600;
    color: #2c3e50;
  }

  .shipping-address {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
  }

  .price-summary {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
  }

  .discount-applied {
    color: #27ae60;
    font-weight: 500;
  }

  .final-amount {
    font-size: 2rem;
    font-weight: 600;
    color: #2c3e50;
    margin: 1rem 0;
  }

  .form-select {
    border: 2px solid #eee;
    padding: 0.8rem;
  }

  .btn-primary {
    background: #3498db;
    border: none;
    padding: 1rem;
    font-weight: 600;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
  }

  .btn-primary:hover {
    background: #2980b9;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
  }

  @media (max-width: 768px) {
    .col-md-8, .col-md-4 {
      padding: 0 1rem;
    }

    .order-summary, .payment-summary {
      margin-bottom: 1rem;
    }

    .final-amount {
      font-size: 1.5rem;
    }
  }
</style>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
  // Wait for the DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
  // Get references to commonly used elements
  const loadingOverlay = document.getElementById('loadingOverlay');
  const retryPaymentForm = document.getElementById('retryPaymentForm');

  // Helper function to show loading overlay
  function showLoading() {
    loadingOverlay.classList.remove('d-none');
  }

  // Helper function to hide loading overlay
  function hideLoading() {
    loadingOverlay.classList.add('d-none');
  }

  // Helper function to extract amount from the page
  function getOrderAmount() {
    const amountText = document.getElementById('amount').textContent;
    return parseFloat(amountText.replace(/[^0-9.]/g, ''));
  }

  // Helper function to show error message
  function showError(title, message) {
    Swal.fire({
      title: title,
      text: message,
      icon: 'error',
      confirmButtonText: 'OK'
    });
  }

  // Handle form submission
  retryPaymentForm.addEventListener('submit', function(event) {
    event.preventDefault();
    showLoading();

    const formData = new FormData(this);
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });

    // Get order amount
    const amount = getOrderAmount();

    // Check COD limit
    if (data.paymentMethod === 'cod' && amount > 1000) {
      hideLoading();
      showError('Exceeded Limit', 'Sorry, COD is not available for orders above ₹1000');
      return;
    }

    // Process payment
    processPayment(data, amount);
  });

  // Main payment processing function
  function processPayment(data, amount) {
    fetch('/retry-payment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
    .then(response => {
      if (!response.ok) {
        return response.text().then(text => {
          throw new Error(text);
        });
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        console.log("Payment Method:", data.paymentMethod);
        
        switch(data.paymentMethod) {
          case 'wallet':
            return handleWalletPayment(amount, data.orderId);
          case 'razorpay':
            return handleRazorpayPayment(data);
          case 'cod':
            return handleCODPayment(data.orderId);
          default:
            throw new Error('Invalid payment method');
        }
      } else {
        throw new Error(data.message || 'Payment initialization failed');
      }
    })
    .catch(error => {
      hideLoading();
      console.error('Error:', error);
      showError('Error!', error.message, 'An unexpected error occurred. Please try again later.');
    });
  }

  // Handle Wallet Payment
  function handleWalletPayment(amount, orderId) {
    return fetch('/wallet/check-balance', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ amount, orderId }),
    })
    .then(response => response.json())
    .then(data => {
      hideLoading();
      if (data.success) {
        window.location.href = `/checkout/orderSuccess?orderId=${orderId}`;
      } else {
        throw new Error('You do not have enough balance in your wallet to complete this purchase.');
      }
    })
    .catch(error => {
      hideLoading();
      console.error('Wallet payment error:', error);
      showError('Wallet Error', 'Failed to process wallet payment. Please try again.');
    });
  }

  // Handle Razorpay Payment
  function handleRazorpayPayment(data) {
    const options = {
      key: data.razorpayKey,
      amount: data.amount * 100,
      currency: data.currency,
      order_id: data.orderId,
      handler: function(response) {
        hideLoading();
        window.location.href = `/checkout/orderSuccess?orderId=${data.orderId}`;
      },
      modal: {
        ondismiss: function() {
          hideLoading();
          Swal.fire({
            title: 'Payment Cancelled',
            text: 'You closed the payment window without completing the payment.',
            icon: 'warning',
            confirmButtonText: 'OK',
          }).then(() => {
            window.location.href = `/checkout/orderFailed?orderId=${data.orderId}`;
          });
        },
      },
      prefill: {
        name: data.customerName || '',
        email: data.customerEmail || '',
        contact: data.customerPhone || ''
      },
      theme: {
        color: '#007bff'
      }
    };

    const rzp1 = new Razorpay(options);
    
    rzp1.on('payment.failed', function(response) {
      hideLoading();
      console.error('Razorpay payment failed:', response);
      Swal.fire({
        title: 'Payment Failed',
        text: 'There was an issue with the payment. Please try again later.',
        icon: 'error',
        confirmButtonText: 'OK'
      }).then(() => {
        window.location.href = `/checkout/orderFailed?orderId=${data.orderId}`;
      });
    });

    rzp1.open();
    return Promise.resolve();
  }

  // Handle COD Payment
  function handleCODPayment(orderId) {
    hideLoading();
    window.location.href = `/checkout/orderSuccess?orderId=${orderId}`;
    return Promise.resolve();
  }

  // Handle Invoice Download
  window.downloadInvoice = function(orderId) {
    showLoading();
    
    fetch(`/checkout/generate-invoice/${orderId}`)
      .then(response => {
        console.log('Invoice response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.blob();
      })
      .then(blob => {
        console.log('Invoice blob received:', blob);
        // Create and trigger download
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `invoice-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        // Redirect after successful download
        setTimeout(() => {
          hideLoading();
          window.location.href = `/checkout/orderSuccess?orderId=${orderId}`;
        }, 1000);
      })
      .catch(error => {
        hideLoading();
        console.error('Error downloading invoice:', error);
        showError('Invoice Error', 'Failed to download the invoice. Please try again later.');
      });
  };
});
</script>
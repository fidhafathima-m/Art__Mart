<%- include("../../views/partials/user/header") %>

<div class="container mt-5">
  <h2 class="mb-4 text-center">Retry Payment</h2>

  <!-- Centering the content with 50% width (col-md-6) -->
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="order-summary bg-light p-4 rounded shadow-lg">
        <h3 class="mb-4">Order Summary</h3>
        <hr />
        <p><strong>Order ID:</strong> <%= order.orderId %></p>
        <p><strong>Amount:</strong> &#8377; <%= order.finalAmount %></p>
        <p><strong>Status:</strong> <%= order.status %></p>
        <div>
          <p><span class="fw-bold">Selected Address:</span> <br>
            <%= address.name %><br>
            <%= address.city %>, <% if (address.landMark) {%> <%= address.landMark %>, <% } %><br>
            <%= address.state %>, <%= address.pincode %></p>
        </div>

        <form id="retryPaymentForm" action="/retry-payment" method="POST" class="mt-4">
          <input type="hidden" name="orderId" value="<%= order.orderId %>">

          <div class="form-group mb-3">
            <label for="paymentMethod" class="form-label">Payment Method</label>
            <select name="paymentMethod" id="paymentMethod" class="form-select" required>
              <option value="razorpay">Razorpay</option>
              <option value="cod">Cash on Delivery</option>
              <option value="wallet">Wallet</option>
            </select>
          </div>

          <button type="submit" class="btn btn-primary w-100 mt-3 shadow-sm">Retry Payment</button>
        </form>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="d-none">
    <div id="loadingSpinner" class="text-center">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="text-white">Processing your request...</p>
    </div>
  </div>
</div>

<%- include("../../views/partials/user/footer") %>



<!-- Custom Styles -->
<style>
  .order-summary {
    border: 1px solid #e3e3e3;
  }

  .order-summary h3 {
    color: #007bff;
  }

  .order-summary p {
    font-size: 1.1rem;
  }

  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
  }

  .btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
  }

  .form-select {
    background-color: #f8f9fa;
    border-color: #ddd;
    border-radius: 0.375rem;
  }

  .form-select:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.25rem rgba(0, 123, 255, 0.25);
  }

  /* Responsive Design */
  @media (max-width: 576px) {
    .order-summary {
      padding: 2rem;
    }

    .container {
      margin-top: 2rem;
    }
  }
</style>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
  document.getElementById('retryPaymentForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission

    const formData = new FormData(this);
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });



    // Send the payment method and order ID to the backend
    fetch('/retry-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })
      .then(response => {
        if (!response.ok) {
          // If the response is not OK, throw an error
          return response.text().then(text => {
            throw new Error(text);
          });
        }
        return response.json(); // Parse the response as JSON
      })
      .then(data => {
        if (data.success) {
          if (data.paymentMethod === 'razorpay') {
            // Initialize Razorpay payment
            const options = {
              key: data.razorpayKey, // Your Razorpay key
              amount: data.amount * 100, // Amount in paise
              currency: data.currency,
              order_id: data.orderId, // Order ID returned from the backend
              handler: function(response) {
                // Handle successful payment
                console.log('Payment Successful:', response);
                downloadInvoice(data.orderId);
              },
              modal: {
                ondismiss: function() {
                  console.log('Payment window was closed before completing.');
                },
              },
            };

            const rzp1 = new Razorpay(options);
            rzp1.open(); // Open the Razorpay payment modal

            // Handle Razorpay payment failure
            rzp1.on('payment.failed', function(response) {
              console.log('Payment Failed:', response);
              Swal.fire({
                title: 'Payment Failed',
                text: 'There was an issue with the payment. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
              }).then(() => {
                window.location.href = `/checkout/orderFailed?orderId=${data.orderId}`; // Redirect to "order failed" page
              });
            });

          } else if (data.paymentMethod === 'wallet') {
  fetch('/wallet/check-balance', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        amount: order.finalAmount
      }),
    })
    .then(response => response.json()) // Ensure that the response is parsed as JSON
    .then(data => {
      if (data.success) {
        downloadInvoice(data.orderId);

      } else {
        // If balance is insufficient, show an alert
        this.disabled = false; // Re-enable the submit button
        document.getElementById('loadingOverlay').classList.add('d-none');
        
        // Show SweetAlert with the error message
        Swal.fire({
          title: 'Insufficient Balance',
          text: 'You do not have enough balance in your wallet to complete this purchase.',
          icon: 'error',
          confirmButtonText: 'OK'
        }).then(() => {
          this.disabled = false; // Re-enable the button after alert
          document.getElementById('loadingOverlay').classList.add('d-none');
        });
      }
    })
    .catch(error => {
      // Handle any unexpected errors with the wallet balance check
      console.error('Error checking wallet balance:', error);
      this.disabled = false; // Re-enable the button in case of error
      document.getElementById('loadingOverlay').classList.add('d-none');
      Swal.fire({
        title: 'Error!',
        text: 'There was an issue checking your wallet balance. Please try again later.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    });
}
 else if (data.paymentMethod === 'cod') {
  console.log('order id: ', data.orderId);
            downloadInvoice(data.orderId);
          }

        } else {
          // Handle error
          console.error('Error:', data.message);
          Swal.fire({
            title: 'Error!',
            text: data.message || 'An unexpected error occurred. Please try again later.',
            icon: 'error',
            confirmButtonText: 'OK',
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'An unexpected error occurred. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK',
        });
      });
  });

  function downloadInvoice(orderId) {

    fetch(`/checkout/generate-invoice/${orderId}`)
      .then(response => {
        console.log('Response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.blob();
      })
      .then(blob => {
        console.log('Blob received:', blob);
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `invoice-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url); // Clean up the object URL

        setTimeout(() => {
          window.location.href = `/checkout/orderSuccess?orderId=${orderId}`;
        }, 1000);

      })
      .catch(error => {
        console.error('Error downloading invoice:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to download the invoice. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      });
  }
</script>
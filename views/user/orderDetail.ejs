<style>
  /* General Styles */
  body {
    font-family: 'Arial', sans-serif;
    background-color: #f7f7f7;
  }

  .container.mt-5 {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    max-width: 1200px;
    margin: 20px auto;
  }

  /* Breadcrumbs */
  .breadcrumb {
    background-color: #f8f9fa;
    padding: 10px 15px;
    border-radius: 5px;
    margin-bottom: 20px;
  }

  .breadcrumb-item a {
    color: #007bff;
    text-decoration: none;
  }

  .breadcrumb-item.active {
    color: #6c757d;
  }

  /* Order Header */
  .display-4 {
    font-size: 2rem;
    font-weight: bold;
    color: #333;
    margin-bottom: 10px;
  }

  .btn-dark {
    background-color: #343a40;
    border: none;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }

  .btn-dark:hover {
    background-color: #23272b;
  }

  .text-muted {
    color: #6c757d !important;
  }

  /* Order Items */
  .card {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    margin-bottom: 15px;
    transition: box-shadow 0.3s ease;
  }

  .card:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .card-body {
    padding: 15px;
  }

  .img-fluid {
    max-height: 100px;
    width: auto;
    border-radius: 5px;
  }

  .font-weight-bold {
    font-size: 1.1rem;
    color: #333;
    margin-bottom: 5px;
  }

  .text-end {
    text-align: right;
  }

  .status-dot {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 8px;
  }

  .text-success {
    color: #28a745 !important;
  }

  .text-danger {
    color: #dc3545 !important;
  }

  .text-warning {
    color: #ffc107 !important;
  }

  /* Buttons */
  .btn {
    padding: 8px 16px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }

  .btn-danger {
    background-color: #dc3545;
    border: none;
  }

  .btn-danger:hover {
    background-color: #c82333;
  }

  .btn-primary {
    background-color: #007bff;
    border: none;
  }

  .btn-primary:hover {
    background-color: #0056b3;
  }

  /* Address Section */
  .text-center.mb-4 {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
  }

  .text-center.mb-4 p {
    margin: 0;
    color: #333;
  }

  /* Return Reason Section */
  .return-reason {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
  }

  .return-reason p {
    margin: 0;
    color: #333;
  }

  /* Loading Overlay */
  #loadingOverlay {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 9999;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .spinner-border {
    width: 3rem;
    height: 3rem;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .container.mt-5 {
      padding: 10px;
    }

    .display-4 {
      font-size: 1.8rem;
    }

    .btn-dark {
      position: static;
      width: 100%;
      margin: 10px 0;
    }

    .card {
      margin: 10px 0;
    }

    .img-fluid {
      max-height: 80px;
    }

    .font-weight-bold {
      font-size: 1rem;
    }

    .btn {
      width: 100%;
      margin: 5px 0;
    }
  }

  @media (max-width: 480px) {
    .display-4 {
      font-size: 1.5rem;
    }

    .img-fluid {
      max-height: 60px;
    }

    .font-weight-bold {
      font-size: 0.9rem;
    }

    .btn {
      font-size: 0.9rem;
      padding: 6px;
    }
  }
</style>

<%- include('../../views/partials/user/header') %>

<div class="container mt-5">
  <!-- Breadcrumbs -->
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/userProfile">Profile</a></li>
      <li class="breadcrumb-item"><a href="/userProfile?section=orders">Order</a></li>
      <li class="breadcrumb-item active" aria-current="page">Order Details</li>
    </ol>
  </nav>

  <!-- Order Header -->
  <div class="mb-5">
    <h3 class="display-4 text-center mb-3">Order Details</h3>
    <% if (order.status === 'Delivered' || order.status === 'Return Request') { %>
    <div class="text-center">
      <button class="btn btn-dark" onclick="downloadInvoice('<%= order.orderId %>')">Download Invoice</button>
    </div>
    <% } %>
    <h5 class="text-muted text-center mt-3">Order ID: <%= order.orderId %></h5>
    <% if (order.status !== 'Cancelled' && order.status !== 'Returned' && order.status !== 'Return Request' && order.status !== 'Payment Pending' && order.status !== 'Delivered') { %>
    <p class="text-center text-muted">You can download the invoice once the product is delivered. Thank you for shopping with us.</p>
    <% } %>
    <p class="text-center text-muted">
      <strong>Placed on:</strong> <%= new Date(order.createdOn).toLocaleDateString() %> - <%= order.paymentMethod %>
    </p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" style="display: none;">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>

  <!-- Action Buttons -->
  <div class="text-center mb-4">
    <% if ((order.status === 'Processing' || order.status === 'Order Placed' || !order.status === 'Payment Pending')) { %>
    <button class="btn btn-danger cancel-order-btn" data-order-id="<%= order._id %>">Cancel Order</button>
    <% } %>
    <% if (order.status === 'Payment Pending') { %>
    <a href="/retry-payment?orderId=<%= order.orderId %>" class="btn btn-primary">Retry Payment</a>
    <% } %>
    <% if (order.status === 'Delivered') { %>
    <button class="btn btn-danger return-order-btn" data-order-id="<%= order._id %>" data-payment-method="<%= order.paymentMethod %>">Return Order</button>
    <% } %>
    <% if (order.status === 'Return Request') { %>
    <div class="return-reason">
      <p class="text-muted">Return Reason: <span class="text-black"><%= order.ordereditems[0].returnReason %></span></p>
      <button class="btn btn-danger cancel-return-order-btn" data-order-id="<%= order._id %>">Cancel Return Request</button>
    </div>
    <% } %>
    <% if (order.status === 'Cancelled') { %>
    <p class="text-center text-danger">Your Order is cancelled for the reason: <%= order.cancellationReason %>.</p>
    <% } %>
    <% if (order.status === 'Returned') { %>
    <p class="text-center text-muted">Your Order is returned for the reason: <%= order.ordereditems[0].returnReason %>.</p>
    <% } %>
    <% if (order.moneySent) { %>
    <p class="text-success text-center">The prepaid money is credited to your wallet</p>
    <% } %>
  </div>

  <!-- Address Section -->
  <div class="text-center mb-4">
    <p><span class="text-muted">Selected Address:</span> <br>
      <%= address.name %><br>
      <%= address.city %>, <% if (address.landMark) {%> <%= address.landMark %>, <% } %><br>
      <%= address.state %>, <%= address.pincode %>
    </p>
    <p>Amount paid: ₹<%= order.finalAmount %></p>
    <% if (order.discount > 0) { %>
    <p class="text-success small">You saved ₹<%= order.discount %>.</p>
    <% } %>
  </div>

  <!-- Order Items -->
  <div class="row justify-content-center">
    <div class="col-12 col-md-8">
      <% order.ordereditems.forEach(item => { %>
      <div class="card mb-4">
        <div class="card-body">
          <div class="row align-items-center">
            <div class="col-3">
              <a href="/product-details?id=<%= item.product._id %>">
                <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="img-fluid" />
              </a>
            </div>
            <div class="col-6">
              <a href="/product-details?id=<%= item.product._id %>">
                <p class="font-weight-bold"><%= item.product.productName %></p>
              </a>
              <p>Price: ₹<%= item.product.salePrice %></p>
            </div>
            <div class="col-3 text-end">
              <div class="d-flex align-items-center justify-content-end">
                <% let statusColor = 'gray'; if (order.status === 'Delivered') { statusColor = 'green'; } else if (order.status === 'Processing') { statusColor = 'yellow'; } else if (order.status === 'Cancelled') { statusColor = 'red'; } %>
                <span class="status-dot" style="background-color: <%= statusColor %>;"></span>
                <span class="font-weight-bold"><%= order.status %></span>
              </div>
              <% if (order.status === 'Delivered') { %>
              <% const review = reviews.find(r => r.productId.toString() === item.product._id.toString()); if (review && !review.existingReview) { %>
              <p class="mt-3">
                <a href="/profile/order/<%= order._id %>/review?product_id=<%= item.product._id %>" class="text-muted fw-bolder">Rate & Review</a>
              </p>
              <% } else if (review && review.existingReview) { %>
              <p class="text-warning small">Already reviewed</p>
              <% } %>
              <% } %>
            </div>
          </div>
        </div>
      </div>
      <% }) %>
    </div>
  </div>
</div>

<%- include('../../views/partials/user/footer') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
$('.cancel-order-btn').on('click', function() {
    const orderId = $(this).data('order-id');

    Swal.fire({
      title: 'Are you sure?',
      text: 'Do you want to cancel this order? Please provide a reason.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, cancel it!',
      cancelButtonText: 'No, keep it',
      input: 'textarea',
      inputPlaceholder: 'Please provide a reason for cancelling this order...',
      inputAttributes: {
        'aria-label': 'Reason for cancelling',
        'maxlength': 300
      },
      showLoaderOnConfirm: true,
      preConfirm: (cancelReason) => {
        if (!cancelReason) {
          Swal.showValidationMessage('You must provide a reason for cancelling');
          return false;
        }

        // Send the cancellation request to the server
        return fetch(`/order/cancel/${orderId}`, {
            method: 'POST',
            body: JSON.stringify({
              cancelReason
            }),
            headers: {
              'Content-Type': 'application/json'
            },
          })
          .then(response => response.json())
          .catch(error => Swal.showValidationMessage('Request failed: ' + error));
      },
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire('Cancelled', 'Your order has been cancelled.', 'success').then(() => {
          location.reload(); // Reload page after cancelling
        });
      }
    });
});


  // Handle return order action
  $('.return-order-btn').on('click', function() {
    const orderId = $(this).data('order-id');
    const paymentMethod = $(this).data('payment-method');

    Swal.fire({
      title: 'Are you sure?',
      text: 'Do you want to return this order?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, return it!',
      cancelButtonText: 'No, keep it',
      input: 'textarea',
      inputPlaceholder: 'Please provide a reason for returning this order...',
      inputAttributes: {
        'aria-label': 'Reason for returning',
        'maxlength': 300
      },
      showLoaderOnConfirm: true,
      preConfirm: (returnReason) => {
        if (!returnReason) {
          Swal.showValidationMessage('You must provide a reason for the return');
          return false;
        }

        // Send the return request to the server
        return fetch(`/order/return/${orderId}`, {
            method: 'POST',
            body: JSON.stringify({
              returnReason
            }),
            headers: {
              'Content-Type': 'application/json'
            },
          })
          .then(response => response.json())
          .catch(error => Swal.showValidationMessage('Request failed: ' + error));
      },
    }).then((result) => {
      if (result.isConfirmed) {
        let successMessage = 'Your return request is under review.';
        if (paymentMethod === 'prepaid') {
          successMessage += ' Your prepaid money will be credited after the request is approved.';
        }
        Swal.fire('Return Requested', successMessage, 'success').then(() => {
          location.reload(); // Reload page after returning
        });
      }
    });
  });

  // Cancel return request
  document.querySelectorAll('.cancel-return-order-btn').forEach(button => {
    button.addEventListener('click', function() {
      const orderId = this.dataset.orderId;

      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to cancel this return request?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/order/cancel-return/${orderId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire('Cancelled!', 'Your return request has been cancelled.', 'success').then(() => {
                  location.reload();
                });
              } else {
                Swal.fire('Error!', data.message, 'error');
              }
            })
            .catch(error => Swal.fire('Error!', 'An error occurred while cancelling the return request. Please try again.', 'error'));
        }
      });
    });
  });

  function downloadInvoice(orderId) {
    document.getElementById('loadingOverlay').style.display = 'flex';

    fetch(`/checkout/generate-invoice/${orderId}`)
      .then(response => {
        console.log('Response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.blob();
      })
      .then(blob => {
        console.log('Blob received:', blob);
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `invoice-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        document.getElementById('loadingOverlay').style.display = 'none';
      })
      .catch(error => {
        console.error('Error downloading invoice:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to download the invoice. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        document.getElementById('loadingOverlay').style.display = 'none';
      });
  }
</script>
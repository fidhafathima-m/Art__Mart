<style>
  #loadingOverlay {
  display: flex; /* Use flexbox to center the spinner */
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent background */
  z-index: 9999; /* Ensure it appears above other content */
}

.spinner-border {
  width: 3rem;
  height: 3rem;
}
  @media (max-width: 768px) {
    /* Container adjustments */
    .container.mt-5 {
      padding: 10px;
      margin-top: 1rem !important;
    }

    /* Header section */
    .display-4 {
      font-size: 1.8rem;
      margin-bottom: 1rem !important;
    }

    /* Download invoice button */
    .btn-dark {
      position: static !important;
      display: block;
      width: 100%;
      margin: 10px 0;
    }

    /* Order ID and date */
    h5.text-muted {
      font-size: 1rem;
      text-align: center;
    }

    /* Breadcrumb */
    .breadcrumb {
      font-size: 0.8rem;
      flex-wrap: wrap;
      padding: 0.5rem !important;
    }

    /* Order item cards */
    .card {
      margin: 10px 0;
      padding: 10px !important;
    }

    .card-body {
      padding: 0.5rem !important;
    }

    /* Order item layout */
    .row.align-items-center {
      flex-direction: column;
      text-align: center;
    }

    .row.align-items-center > div {
      width: 100% !important;
      max-width: 100% !important;
      flex: 0 0 100% !important;
      margin-bottom: 10px;
    }

    /* Product image */
    .img-fluid {
      max-height: 120px !important;
      margin: 0 auto;
      display: block;
    }

    /* Product details */
    .font-weight-bold {
      font-size: 1rem;
      margin: 8px 0;
    }

    /* Price and discount */
    .text-end {
      text-align: center !important;
    }

    /* Status indicator */
    .status-dot {
      margin: 5px !important;
    }

    /* Action buttons */
    .btn {
      width: 100%;
      margin: 5px 0;
      padding: 8px;
    }

    /* Address section */
    .text-center.mb-4 {
      margin: 15px 0;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 5px;
    }

    /* Return reason section */
    .return-reason {
      padding: 10px;
      margin: 10px 0;
    }

    /* Status messages */
    .text-success,
    .text-danger {
      text-align: center;
      margin: 10px 0;
      padding: 5px;
    }
  }

  /* Extra small devices */
  @media (max-width: 480px) {
    /* Further reduce font sizes */
    .display-4 {
      font-size: 1.5rem;
    }

    /* Adjust product image size */
    .img-fluid {
      max-height: 100px !important;
    }

    /* Make prices and text more readable */
    span, p {
      font-size: 0.9rem;
    }

    /* Tighten up spacing */
    .card {
      margin: 5px 0;
    }

    /* Adjust button sizes */
    .btn {
      font-size: 0.9rem;
      padding: 6px;
    }

    /* Status indicator adjustments */
    .status-dot {
      width: 12px !important;
      height: 12px !important;
    }

    /* Rate & Review link */
    .text-muted.fw-bolder {
      font-size: 0.8rem;
    }

    /* Already reviewed text */
    .text-warning {
      font-size: 0.8rem !important;
    }
  }
</style>

<%- include('../../views/partials/user/header') %>

<div class="container mt-5">
  <!-- Breadcrumbs -->
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/userProfile">Profile</a></li>
      <li class="breadcrumb-item">
        <a href="/userProfile?section=orders">Order</a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">Order Details</li>
    </ol>
  </nav>

  <div class="mb-5" style="position: relative;">
    <h3 class="display-4 text-center mb-0">Order Details</h3>
    <% if (order.status !== 'Payment Pending' && order.status !== 'Cancelled') { %>
    <button class="btn btn-dark text-center" onclick="downloadInvoice('<%= order.orderId %>')" style="position: absolute; right: 0; top: -20px;">Download Invoice</button>
    <% } %>
    <h5 class="text-muted">Order ID: <%= order.orderId %></h5>
    <p class="text-center">
      <strong>Placed on:</strong> <%= new Date(order.createdOn).toLocaleDateString() %> - <%= order.paymentMethod %>
    </p>
  </div>

  <!-- Loading Overlay -->
<div id="loadingOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.8); z-index: 9999; justify-content: center; align-items: center;">
  <div class="spinner-border" role="status">
    <span class="visually-hidden">Loading...</span>
  </div>
</div>


  <div class="d-flex justify-content-center">
    <% if ((order.status === 'Processing' || order.status === 'Order Placed' || !order.status === 'Payment Pending')) { %>
    <button class="btn btn-danger my-2 cancel-order-btn" data-order-id="<%= order._id %>">Cancel Order</button>
    <% } %>
    <% if (order.status === 'Payment Pending') { %>
    <div class="text-center">
      <a href="/retry-payment?orderId=<%= order.orderId %>" class="btn btn-primary mb-4">Retry Payment</a>
    </div>
    <% } %>
    <% if (order.status === 'Delivered') { %>
    <button class="btn btn-danger my-2 return-order-btn" data-order-id="<%= order._id %>" data-payment-method="<%= order.paymentMethod %>">Return Order</button>
    <% } %>
    <% if (order.status === 'Return Request') { %>
    <div class="return-reason text-center">
      <p class="text-muted">Return Reason: <span class="text-black"><%= order.ordereditems[0].returnReason %></span></p>
      <button class="btn btn-danger my-2 cancel-return-order-btn" data-order-id="<%= order._id %>">Cancel Return Request</button>
    </div>
    <% } %>
    <% if (order.status === 'Cancelled') { %>
      <p class="text-center text-danger">Your Order is cancelled for the reason: <%= order.cancellationReason %>. </p>
      <% } %>
    <% if (order.status === 'Returned') { %>
    <p class="text-center">Your Order is returned for the reason: <%= order.ordereditems[0].returnReason %>. </p>
    <% } %>

    <% if(order.moneySent) { %>
    <p class="text-success text-center">The prepaid money is credited to your wallet</p>
    <% } %>

  </div>

  <div class="text-center mb-4">
    <p><span class="text-muted">Selected Address:</span> <br>
      <%= address.name %><br>
      <%= address.city %>, <% if (address.landMark) {%> <%= address.landMark %>, <% } %><br>
      <%= address.state %>, <%= address.pincode %>
    </p>
  </div>

  <div class="d-flex justify-content-center">
    <div class="col-12 col-md-8">
      <% order.ordereditems.forEach(item => { %>
      <div class="card mb-4 shadow-sm p-3" style="max-width: 900px;">
        <div class="card-body">
          <div class="row align-items-center">
            <div class="col-2">
              <a href="/product-details?id=<%= item.product._id %>">
                <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="img-fluid" style="max-height: 80px; width: auto;" />
              </a>
            </div>
            <div class="col-5">
              <a href="/product-details?id=<%= item.product._id %>">
                <p class="font-weight-bold"><%= item.product.productName %></p>
              </a>
              <span>Price: ₹<%= order.finalAmount %></span>
              <% if (order.discount > 0) { %>
              <span class="text-success small pl-3">You saved ₹<%= order.discount %></span>
              <% } %>
            </div>
            <div class="col-3 text-end">
              <div class="text-end justify-content-center">
                <% let statusColor = 'gray'; if (order.status === 'Delivered') { statusColor = 'green'; } else if (order.status === 'Processing') { statusColor = 'yellow'; } else if (order.status === 'Cancelled') { statusColor = 'red'; } %>
                <span class="status-dot" style="background-color: <%= statusColor %>; border-radius: 50%; display: inline-block; width: 15px; height: 15px; margin-top: 10px;"></span>
                <span class="card-text ml-3 font-weight-bold"><%= order.status %></span>

                <!-- Rate and Review Link -->
                <% if (order.status === 'Delivered') { %>
                <% 
                    const review = reviews.find(r => r.productId.toString() === item.product._id.toString());
                    if (review && !review.existingReview) { 
                  %>
                <p class="mt-4">
                  <a href="/profile/order/<%= order._id %>/review?product_id=<%= item.product._id %>" class="text-muted fw-bolder">Rate & Review</a>
                </p>
                <% 
                    } else if (review && review.existingReview) { 
                  %>
                <p class="text-warning" style="font-size: 13px">Already reviewed</p>
                <% } %>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
      <% }) %>
    </div>
  </div>
</div>

<%- include('../../views/partials/user/footer') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
$('.cancel-order-btn').on('click', function() {
    const orderId = $(this).data('order-id');

    Swal.fire({
      title: 'Are you sure?',
      text: 'Do you want to cancel this order? Please provide a reason.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, cancel it!',
      cancelButtonText: 'No, keep it',
      input: 'textarea',
      inputPlaceholder: 'Please provide a reason for cancelling this order...',
      inputAttributes: {
        'aria-label': 'Reason for cancelling',
        'maxlength': 300
      },
      showLoaderOnConfirm: true,
      preConfirm: (cancelReason) => {
        if (!cancelReason) {
          Swal.showValidationMessage('You must provide a reason for cancelling');
          return false;
        }

        // Send the cancellation request to the server
        return fetch(`/order/cancel/${orderId}`, {
            method: 'POST',
            body: JSON.stringify({
              cancelReason
            }),
            headers: {
              'Content-Type': 'application/json'
            },
          })
          .then(response => response.json())
          .catch(error => Swal.showValidationMessage('Request failed: ' + error));
      },
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire('Cancelled', 'Your order has been cancelled.', 'success').then(() => {
          location.reload(); // Reload page after cancelling
        });
      }
    });
});


  // Handle return order action
  $('.return-order-btn').on('click', function() {
    const orderId = $(this).data('order-id');
    const paymentMethod = $(this).data('payment-method');

    Swal.fire({
      title: 'Are you sure?',
      text: 'Do you want to return this order?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, return it!',
      cancelButtonText: 'No, keep it',
      input: 'textarea',
      inputPlaceholder: 'Please provide a reason for returning this order...',
      inputAttributes: {
        'aria-label': 'Reason for returning',
        'maxlength': 300
      },
      showLoaderOnConfirm: true,
      preConfirm: (returnReason) => {
        if (!returnReason) {
          Swal.showValidationMessage('You must provide a reason for the return');
          return false;
        }

        // Send the return request to the server
        return fetch(`/order/return/${orderId}`, {
            method: 'POST',
            body: JSON.stringify({
              returnReason
            }),
            headers: {
              'Content-Type': 'application/json'
            },
          })
          .then(response => response.json())
          .catch(error => Swal.showValidationMessage('Request failed: ' + error));
      },
    }).then((result) => {
      if (result.isConfirmed) {
        let successMessage = 'Your return request is under review.';
        if (paymentMethod === 'prepaid') {
          successMessage += ' Your prepaid money will be credited after the request is approved.';
        }
        Swal.fire('Return Requested', successMessage, 'success').then(() => {
          location.reload(); // Reload page after returning
        });
      }
    });
  });

  // Cancel return request
  document.querySelectorAll('.cancel-return-order-btn').forEach(button => {
    button.addEventListener('click', function() {
      const orderId = this.dataset.orderId;

      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to cancel this return request?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/order/cancel-return/${orderId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire('Cancelled!', 'Your return request has been cancelled.', 'success').then(() => {
                  location.reload();
                });
              } else {
                Swal.fire('Error!', data.message, 'error');
              }
            })
            .catch(error => Swal.fire('Error!', 'An error occurred while cancelling the return request. Please try again.', 'error'));
        }
      });
    });
  });

  function downloadInvoice(orderId) {
    document.getElementById('loadingOverlay').style.display = 'flex';

    fetch(`/checkout/generate-invoice/${orderId}`)
      .then(response => {
        console.log('Response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.blob();
      })
      .then(blob => {
        console.log('Blob received:', blob);
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `invoice-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        document.getElementById('loadingOverlay').style.display = 'none';
      })
      .catch(error => {
        console.error('Error downloading invoice:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to download the invoice. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        document.getElementById('loadingOverlay').style.display = 'none';
      });
  }
</script>
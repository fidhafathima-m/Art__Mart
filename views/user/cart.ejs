<%- include('../../views/partials/user/header', { user: user }) %>

<!-- Breadcrumbs -->
<nav aria-label="breadcrumb">
  <ol class="breadcrumb ps-4">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Cart</li>
  </ol>
</nav>

<div class="cart-container">
  <!-- Shopping Cart Items -->
  <div class="cart-items bg-white p-4 rounded">
    <div class="cart-header">
      <h2>Shopping Cart</h2>
      <span class="text-muted price-label">Price</span>
    </div>
    <hr />
    <% if (cartItems.length > 0) { %>
      <% cartItems.forEach(item => { %>
        <div class="cart-item">
          <div class="item-image">
            <img src="<%= item.productImage[0] %>" alt="<%= item.productName %>" />
          </div>
          <div class="item-details">
            <h3 class="product-name"><%= item.productName %></h3>
            <% if (item.productStock > 0) { %>
              <p>In Stock</p>
            <% } else { %>
              <p class="text-danger">Out of Stock</p>
            <% } %>
            <!-- Quantity Control -->
            <div class="quantity-control">
              <button class="btn btn-light decrease-quantity">
                <i class="bi bi-dash"></i>
              </button>
              <input 
                type="text" 
                class="form-control quantity-input" 
                value="<%= item.cartQuantity %>" 
                readonly
                data-product-id="<%= item.productId %>"
                data-max-quantity="<%= item.productStock %>"
              />
              <button class="btn btn-light increase-quantity">
                <i class="bi bi-plus"></i>
              </button>
            </div>
            <div class="delete-container">
              <a href="" class="text-danger delete-item">Delete</a>
            </div>
          </div>
          <div class="price-details">
            <h3>&#8377; <%= item.salePrice %></h3>
            <% if(item.productOffer > 0) { %>
              <small class="text-danger"><%= item.productOffer %>% off</small>
            <% } %>
          </div>
        </div>
        <hr />
      <% }) %>
      <div class="subtotal-section">
        <span>Subtotal(<%= cartItems.length %> items):</span>
        <% let subtotal = 0; %>
        <% cartItems.forEach(item => { %>
          <% subtotal += item.salePrice * item.cartQuantity; %>
        <% }) %>
        <p class="subtotal-amount"><strong>&#8377; <%= subtotal %></strong></p>
      </div>
    <% } else { %>
      <div class="empty-cart">
        <h5>Oops! There is nothing in your Cart!!</h5>
        <a href="/shop" class="btn shop-btn">Go to shop</a>
      </div>
    <% } %>
  </div>

  <!-- Subtotal & Proceed to Buy -->
  <div class="subtotal-sidebar bg-white p-4 rounded">
    <h3>Subtotal(<%= cartItems.length %> items):</h3>
    <hr />
    <div class="total-section">
      <% subtotal = 0; %>
      <% cartItems.forEach(item => { %>
        <% subtotal += item.salePrice * item.cartQuantity; %>
      <% }) %>
      <p><strong>Total: &#8377; <%= subtotal %></strong></p>
    </div>
    <% if (cartItems.length === 0) { %>
      <button class="btn btn-secondary proceed-btn" disabled>Proceed to Buy</button>
    <% } else { %>
      <a href="/checkout" class="proceed-to-buy btn proceed-btn" onclick="quantity()">
        Proceed to Buy
      </a>
    <% } %>
  </div>

  <style>
    .cart-container {
      display: flex;
      flex-direction: row;
      gap: 20px;
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }

    .cart-items {
      flex: 7;
    }

    .subtotal-sidebar {
      flex: 3;
      height: fit-content;
      position: sticky;
      top: 20px;
    }

    .cart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
    }

    .cart-item {
      display: flex;
      align-items: flex-start;
      gap: 15px;
      margin: 20px 0;
    }

    .item-image img {
      width: 100px;
      height: 100px;
      object-fit: cover;
    }

    .item-details {
      flex-grow: 1;
    }

    .product-name {
      font-size: 1.1rem;
      margin-bottom: 8px;
    }

    .quantity-control {
      display: flex;
      align-items: center;
      gap: 10px;
      margin: 15px 0;
    }

    .quantity-input {
      width: 60px;
      text-align: center;
    }

    .price-details {
      text-align: right;
      min-width: 100px;
    }

    .subtotal-section {
      display: flex;
      justify-content: flex-end;
      align-items: center;
      gap: 10px;
    }

    .proceed-btn {
      width: 100%;
      padding: 10px;
      background: #4caf50;
      color: white;
      border: none;
      cursor: pointer;
    }

    .proceed-btn:disabled {
      background: #cccccc;
    }

    .empty-cart {
      text-align: center;
      padding: 20px;
    }

    .shop-btn {
      background: #4caf50;
      color: white;
      padding: 10px 20px;
      margin-top: 15px;
      display: inline-block;
    }

    /* Mobile Styles */
    @media (max-width: 768px) {
      .cart-container {
        flex-direction: column;
        padding: 10px;
      }

      .cart-header h2 {
        font-size: 1.5rem;
      }

      .price-label {
        display: none;
      }

      .cart-item {
        flex-direction: column;
        gap: 10px;
      }

      .item-image img {
        width: 120px;
        height: 120px;
      }

      .product-name {
        font-size: 1rem;
      }

      .price-details {
        text-align: left;
        width: 100%;
      }

      .price-details h3 {
        font-size: 1.2rem;
        margin: 5px 0;
      }

      .quantity-control {
        margin: 10px 0;
      }

      .quantity-input {
        width: 50px;
      }

      .subtotal-section {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
      }

      .subtotal-sidebar {
        position: static;
        margin-top: 20px;
      }

      .subtotal-sidebar h3 {
        font-size: 1.2rem;
      }

      .total-section p {
        font-size: 1.1rem;
      }
    }

    /* Small Mobile Styles */
    @media (max-width: 480px) {
      .cart-container {
        padding: 5px;
      }

      .cart-header h2 {
        font-size: 1.3rem;
      }

      .item-image img {
        width: 100px;
        height: 100px;
      }

      .product-name {
        font-size: 0.9rem;
      }

      .price-details h3 {
        font-size: 1.1rem;
      }

      .quantity-control button {
        padding: 5px 8px;
      }

      .quantity-input {
        width: 40px;
        height: 30px;
      }
    }
  </style>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const increaseButtons = document.querySelectorAll(".increase-quantity");
    const decreaseButtons = document.querySelectorAll(".decrease-quantity");
    const deleteButtons = document.querySelectorAll(".delete-item");

    // Function to update the cart display
    function updateCartDisplay(cartItem, quantity, newTotalPrice, cartTotalAmount) {
      // Update quantity input
      const inputField = cartItem.querySelector(".quantity-input");
      inputField.value = quantity;

      // Update item total price
      const priceElement = cartItem.querySelector(".price-details h3");
      const itemPrice = parseFloat(priceElement.innerText.replace("â‚¹", "").trim());

      const subtotalBottom = document.querySelector('.subtotal-bottom strong');
      if (subtotalBottom) {
        subtotalBottom.innerHTML = `&#8377; ${cartTotalAmount}`;
      }

      // Update cart total in both places
      const subtotalRight = document.querySelector('.subtotal p strong');
      if (subtotalRight) {
        subtotalRight.innerHTML = `Total: &#8377; ${cartTotalAmount}`;
      }

      // Update items count
      const itemCountElements = document.querySelectorAll('h3');
      itemCountElements.forEach(element => {
        if (element.innerText.includes('Subtotal(')) {
          const totalItems = document.querySelectorAll('.cart-item').length;
          element.innerText = `Subtotal(${totalItems} items):`;
        }
      });
    }

    // Function to update quantity via AJAX
    async function updateQuantity(productId, quantity, cartItem) {
      try {
        const response = await fetch(`/cart/update-quantity/${productId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            productId,
            quantity,
          }),
        });

        const data = await response.json();

        if (data.success) {
          // Find the updated item in the response
          const updatedItem = data.cartData.items.find(
            item => item.productId === productId
          );

          if (updatedItem) {
            updateCartDisplay(
              cartItem,
              updatedItem.quantity,
              updatedItem.totalPrice,
              data.cartData.totalAmount
            );
          }
        } else {
          throw new Error(data.message || "Failed to update quantity");
        }
      } catch (error) {
        console.error(error);
        Swal.fire({
          title: "Error",
          text: error.message || "Failed to update quantity",
          icon: "error",
        });
      }
    }

    // Increase Quantity
    increaseButtons.forEach((button) => {
      button.addEventListener("click", async (event) => {
        const cartItem = event.target.closest(".cart-item");
        const inputField = cartItem.querySelector(".quantity-input");
        const productId = inputField.getAttribute("data-product-id");
        const maxQuantity = parseInt(inputField.getAttribute("data-max-quantity"));
        let quantity = parseInt(inputField.value);

        if (quantity < maxQuantity && quantity < 5) {
          quantity += 1;
          await updateQuantity(productId, quantity, cartItem);
        } else {
          Swal.fire({
            title: quantity >= 5 ? "Limit Reached!" : "Stock Limit Reached!",
            text: quantity >= 5 ?
              "You can only add a maximum of 5 items of this product." :
              `You can only add a maximum of ${maxQuantity} items based on available stock.`,
            icon: "warning",
            confirmButtonText: "OK",
          });
        }
      });
    });

    // Decrease Quantity
    decreaseButtons.forEach((button) => {
      button.addEventListener("click", async (event) => {
        const cartItem = event.target.closest(".cart-item");
        const inputField = cartItem.querySelector(".quantity-input");
        const productId = inputField.getAttribute("data-product-id");
        let quantity = parseInt(inputField.value);

        if (quantity > 1) {
          quantity -= 1;
          await updateQuantity(productId, quantity, cartItem);
        } else {
          Swal.fire({
            title: "Minimum Quantity",
            text: "You should select at least one quantity!",
            icon: "warning",
          });
        }
      });
    });

    // Delete Item
    deleteButtons.forEach((button) => {
      button.addEventListener("click", async (event) => {
        event.preventDefault();

        const productId = event.target
          .closest(".cart-item")
          .querySelector(".quantity-input")
          .getAttribute("data-product-id");

        const result = await Swal.fire({
          title: "Are you sure?",
          text: "You are removing an item from cart!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#3085d6",
          confirmButtonText: "Yes, delete it!",
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch(`/cart/delete-item/${productId}`, {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
              },
            });

            const data = await response.json();

            if (data.success) {
              // Remove the item from the DOM
              event.target.closest(".cart-item").remove();

              // Update the subtotal
              updateSubtotal();

              Swal.fire(
                "Deleted!",
                "Your item has been removed from the cart.",
                "success"
              ).then(() => {
                location.reload();
              });
            } else {
              Swal.fire(
                "Error!",
                "There was an issue deleting the item. Please try again.",
                "error"
              );
            }
          } catch (error) {
            console.log(error);
            Swal.fire(
              "Error!",
              "Failed to communicate with the server. Please try again.",
              "error"
            );
          }
        }
      });
    });

    // Function to update subtotal
    function updateSubtotal() {
      let subtotal = 0;
      const cartItems = document.querySelectorAll(".cart-item");

      cartItems.forEach((item) => {
        const price = parseFloat(item.querySelector(".price-details h3").innerText.replace("â‚¹", "").trim());
        const quantity = parseInt(item.querySelector(".quantity-input").value);
        subtotal += price * quantity;
      });

      // Update the subtotal in the cart items section
      const cartSubtotalElement = document.querySelector(".cart-items p strong");
      if (cartSubtotalElement) {
        cartSubtotalElement.innerHTML = `&#8377; ${subtotal}.00`;
      }

      // Update the subtotal in the right-hand panel
      const panelSubtotalElement = document.querySelector(".subtotal p strong");
      if (panelSubtotalElement) {
        panelSubtotalElement.innerHTML = `Total: &#8377; ${subtotal}.00`;
      }
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    const proceedButton = document.querySelector(".proceed-to-buy");

    // Function to check quantities before proceeding to checkout
    async function checkQuantitiesBeforeCheckout(event) {
      const cartItems = document.querySelectorAll(".cart-item");
      let invalidQuantity = false;

      for (let cartItem of cartItems) {
        const inputField = cartItem.querySelector(".quantity-input");
        const productId = inputField.getAttribute("data-product-id");
        const maxQuantity = parseInt(inputField.getAttribute("data-max-quantity"));
        let quantity = parseInt(inputField.value);

        // Check if the quantity exceeds available stock
        if (quantity > maxQuantity) {
          invalidQuantity = true;

          // Show SweetAlert with the available stock message
          await Swal.fire({
            title: "Stock Limit Exceeded!",
            text: `You can only add a maximum of ${maxQuantity} items for this product.`,
            icon: "warning",
            confirmButtonText: "OK",
          });

          // Focus on the quantity input field for correction
          inputField.focus();
          return;  // Prevent proceeding to checkout
        }
      }

      if (!invalidQuantity) {
        // If no invalid quantity, proceed to checkout
        window.location.href = "/checkout";
      }
    }

    // Attach the checkQuantitiesBeforeCheckout function to the Proceed to Buy button
    if (proceedButton) {
      proceedButton.addEventListener("click", (event) => {
        event.preventDefault(); // Prevent default navigation to checkout

        // Check the quantities before proceeding
        checkQuantitiesBeforeCheckout(event);
      });
    }
  });

</script>

<%- include('../../views/partials/user/footer') %>